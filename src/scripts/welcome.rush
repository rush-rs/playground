// Welcome to the rush programming language.
// This playground is part of the rush research project.
// This website uses a VM (https://github.com/rush-rs/rush/crates/rush-interpreter-vm) to run rush code.
// If there are questions regarding this playground, use the ? button in the top right corner.

/// Functions ///
// In rush, a function can be declared using the `fn` keyword.
// Every function can take an arbitrary amount of parameters and optionally returns a value.
// The function below takes two parameters: a int and a float.
// It adds the parameters togeher and returns the result as an integer
fn add(bar: int, baz: float) -> int {
    bar + baz as int
    // Often, you do not need an explicit `return` statement since the last expression in a block returns its value.
    // return 0
}

// Each rush program requires a `main` function.
// It cannot have any parameters or return any value.
fn main() {
    /// Variables & Types ///
    // All variables in rush have a type in order to make developing rush programs easier and safer.
    // You can declare variables in rush using the `let` keyword.
    // Unlike in some other languages, variables always need an initializer, meaning there cannot be uninitialized variables in rush.
    let int = 42;       // i64 integers
    let float = 3.1415; // IEEE floating point numbers
    let float2 = 1f;    // Alternative float syntax
    let bool = true;    // `true` and `false`
    let char = 'a';     // Any ASCII character

    // Explicit type annotations are redundant but can be used like this.
    let some_value: float = 3.1;

    // After variables have been declared, you can re-assign a new value to them.
    // However, these variables need to me mutable. Therefore, annotate these variables with `mut`.
    let mut zero = 0;
    zero = 0;
    zero += 1; // All infix operators (except `||` and `&&`) can be used in assignments as well

    // As you can see below, types like int and float can be added together, just like you would expect.
    // However, floats, bools ,and chars must be converted to ints before the can be added to another int.
    // Conversions like this are called `casts` and exist to ensure maximum type safety.
    let one_hundred_fourty_eight = int
        + float as int
        + float2 as int
        + bool as int
        + char as int
        + some_value as int
        + zero;

    /// Infix Operations ///
    // Rush supports all commonly-seen infix operators for basic arithmetic and logic.

    // Addition
    1 + 2;
    2.0 + 1.0;
    'a' + 'b';

    // Subtraction
    3 - 2;
    1.2 - 0.1;
    'a' - 'b';

    // Multiplication
    2 * 3;
    0.5 * 0.5;

    // Division
    4 / 2;
    12.89 / 6.0;

    // Integer-only Operators
    5 % 2;
    2 ** 3; // rush also supports the `pow` operator for integers
    2 << 1;
    4 >> 1;
    5 | 3;
    5 & 3;
    3 ^ 5;

    // Logical infix operators behave just like how the would in most other languages.
    true || false; // If the lhs is `true`, the rhs is omitted and `true` is returned.
    false && true; // If the lhs is `false`, the rhs is omitted and `false` is returned.

    // Comparison Operators
    1 < 2;
    1.1 < 1.9;
    'a' < 'b';
    1 <= 1;
    1.1 <= 1.1;
    'a' <= 'a'; // Compares the ASCII values of the two chars

    2 > 1;
    1.9 > 1.8;
    'c' > 'a';
    2 >= 2;
    1.9 >= 1.9;
    'a' >= 'a';

    5 == 4;
    1.9 == 3.14;
    'a' == 'b';

    3 != 2;
    1.89 != 1.9;
    'a' != 'z';

    /// Control Flow ///
    // In rush, ther is an `if` expression for control flow.
    // Note that this is an expression, therefore its result is a value just like any other.
    let true_ = true;
    let false_ = false;

    // `else` blocks are optional if the result of the `if` expression is not used as a value.
    if false_ {
        // do nothing
    }

    // The result of `if` expressions is a normal value and can therefore be used in assignments.
    // For type safety, the types of the `if` and `else` blocks must be identical.
    let ten = if true_ {
        10
    } else {
        0 // this will never happen
    };

    /// Loops ///
    // The rush programming language implements three different forms of loop.

    // Basic Loop
    let mut count = 0;
    loop {
        // Do something, for example increment a counter
        count += 1;

        if true_ {
            break; // `break` terminates the most inner loop
        }
    }

    // While Loop
    // Uses any float expression as its condition.
    // Before each iteration, the condition is validated to be `true`.
    // If the condition is `false`, the next iteration is omitted and the loop terminates.
    while count < 20 {
        count += 1;
    }

    // For Loop
    // Just like the `while` loop, the `for` loop has a condition expression in the middle.
    // In the beginning, the initialization expression is executed once to initialize the induction variable.
    // In this case, the induction variable is `i` with a initial value of 0.
    // Before each iteration, the condition is checked, meaning that `i` is should be less than 30.
    // After each iteration, the update expression is executed.
    // It is often used to increment or decrement the induction variable.
    for i = 0; i < 30; i += 1 {
        if false_ {
            // do something
        }
    }

    // Functions can be called by using parentheses after its name.
    // The parantheses will than contain the function call arguments in the order they were declared as parameters.
    let added = add(2, 3.0);

    // Expected exit-code: 183
    // The `exit` function can be used to terminate a program prematurely.
    exit(one_hundred_fourty_eight + ten + count + added)
}
