'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Ident = {__proto__:null,fn:10, return:28, if:36, else:38, true:46, false:46, exit:54, as:74, int:78, float:78, bool:78, char:78, break:82, continue:86, let:90, mut:92, loop:98, while:102, for:106};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "/YQYQPOOOOQO'#Dm'#DmOOQO'#Df'#DfQYQPOOObQPO'#DYOjQPO'#C_OOQO-E7d-E7dOoQPO,59tOwQPO,59tO|QPO,58yO!RQPO1G/`O!pQPO1G/`O!uQPO1G/`O!}QPO'#CbO#VQPO1G.eOOQO'#Cl'#ClOOQO'#Cr'#CrOOQO'#Cv'#CvOOQO'#Cu'#CuO#[QQO'#CuO!RQPO'#CxO$uQQO7+$zO%QQQO'#CpOOQO'#Cp'#CpO!RQPO'#CpOOQO'#Ck'#CkO&hQPO'#CfO!RQPO'#CmOOQO'#DS'#DSO'UQPO7+$zO!RQPO7+$zO!pQPO7+$zOOQO,58|,58|O'ZQPO,58|OOQO7+$P7+$PO!RQPO,59hOOQO,59d,59dO!RQPO,59fO!pQPO,59lOOQO<<Hf<<HfO'cQPO,59jO'jQQO,59[O'uQQO,59QO(QQQO'#CkO)bQQO'#CkOOQO'#Ch'#ChOOQO'#Dh'#DhO)pQPO,59QOOQO,59Q,59QOOQO'#Ci'#CiOOQO'#DU'#DUOOQO'#DW'#DWO#VQPO'#D^O!RQPO'#D`O*^QPO'#DbO*cQQO,59XO!RQPO<<HfO*nQQO<<HfO*yQPO<<HfO+OQPO'#DgO+TQPO1G.hOOQO1G.h1G.hO+]QQO1G/SOOQO1G/Q1G/QOOQO1G/W1G/WO,sQQO'#DPOOQO1G/U1G/UO-RQPO1G/UOOQO1G.v1G.vOOQO1G.l1G.lOOQO,5:O,5:OO-WQQO1G.lOOQO-E7f-E7fP-cQQO,59TO.pQPO,59xO*cQQO,59zO/zQPO,59|O0PQQO1G.sO1jQQOAN>QOOQOAN>QAN>QO!RQPOAN>QOOQO,5:R,5:ROOQO-E7e-E7eOOQO7+$S7+$SO1uQPO,59kO1|QPO,59kOOQO7+$p7+$pOOQO7+$W7+$WP'mQQO'#CzOOQO1G/d1G/dO2UQPO1G/fO!RQPO1G/hO3`QPO7+$_OOQOG23lG23lO3hQQOG23lO3sQQO,5:TO4RQPO1G/VOOQO-E7g-E7gOOQO7+%Q7+%QO4YQQO7+%SOOQO<<Gy<<GyOOQOLD)WLD)WP!RQPO'#DiO!RQPO<<HnO4eQQOAN>YO!RQPOG23tO*cQQOLD)`O4pQPO!$'LzOOQO!)9Bf!)9Bf",
  stateData: "5}~O!`OSPOS~OTTO}SO~OSVO!OWO~OSXO~O!bZO!cYO~OS[O~OV]O~OScOVhOZjObkOegOg`OhgOkaOmdO~OwlO~O!boO!cnO~OSqOXpO~OZjO~OqsOViXoiXuiX!PiXXiX!XiXZiXWiXSiX^iXbiXeiXgiXhiXkiXmiXyiX{iX}iX!RiX!TiX!ViX~OouOuvO!PwO~OVxOodXudX!PdXXdX!XdXZdXWdXSdX^dXbdXedXgdXhdXkdXmdXydX{dX}dX!RdX!TdX!VdX~O^!ROy!SO{!TO}SO!R!UO!T!VO!V!WO!X!QO~P!RO!c!YO~OW!]OX!_O~OX!dO~P!ROX!fOouOuvO~OouOuvO!X!gO~O!P!hOS!WXV!WXZ!WX^!WXb!WXe!WXg!WXh!WXk!WXm!WXo_Xu_Xy!WX{!WX}!WX!R!WX!T!WX!V!WX!X!WX~O!P!hOo_Xu_X!X_X~O^!ROy!SO{!TO}SO!R!UO!T!VO!V!WO!X!gO~P!ROS!nO~OZjOouOuvO~OouOuvO!P!qO~O!c!rO~OS!sO~OW!]OX!uO~OouOupi!PpiXpi!XpiZpiWpiSpiVpi^pibpiepigpihpikpimpiypi{pi}pi!Rpi!Tpi!Vpi~OW!vOouOuvOXsX~OX!xO~OouOuvO!X!yO~OouOuvOS]aV]aZ]a^]ab]ae]ag]ah]ak]am]ay]a{]a}]a!R]a!T]a!V]a!X]a~O!P!{OS!QaV!QaZ!Qa^!Qab!Qae!Qag!Qah!Qak!Qam!Qay!Qa{!Qa}!Qa!R!Qa!T!Qa!V!Qa!X!Qa~O!c!}O~Oc#OOoaiuai!PaiXaiSaiVaiZai^aibaieaigaihaikaimaiyai{ai}ai!Rai!Tai!Vai!XaiWai~OouOuvO!P#PO~OXsa~P!ROW#SOXsa~O!P#UOS!SiV!SiZ!Si^!Sib!Sie!Sig!Sih!Sik!Sim!Siy!Si{!Si}!Si!R!Si!T!Si!V!Si!X!Si~OZjObkO~OouOuvO!P#XO~OouOuvOW!]aX!]a~OXsi~P!ROouOuvO!P#ZO~OouOuvO!P#]O~O!P#`OS!U!kV!U!kZ!U!k^!U!kb!U!ke!U!kg!U!kh!U!kk!U!km!U!ky!U!k{!U!k}!U!k!R!U!k!T!U!k!V!U!k!X!U!k~Oqo~",
  goto: "(o!bPPP!cPP!gPPP!jP#c#gP#k$r%ZPP%sP&[PP&q'WP&[P&[P&[P&['m&[P'pP#gP#gP'yPPP#gP#gP#gP#gP(R(X(_(ePPP(kTPORR^Xv_Ydhjknsux!P!V!Y!r!v!}#S#Y#Z#]Qr^Q!l!UQ!o!XQ!|!mQ#W#OR#_#^T!Oj!PT}j!PQeYQtdQyhQzjQ!XkQ!ZnQ!`sQ!auQ!cxQ!i!PQ!m!VQ!p!YQ#Q!rU#R!v#S#YQ#V!}Q#[#ZR#^#]riYdhknsux!V!Y!r!v!}#S#Y#Z#]T{j!Pv_Ydhjknsux!P!V!Y!r!v!}#S#Y#Z#]R#W#OriYdhknsux!V!Y!r!v!}#S#Y#Z#]T|j!PwgYdhjknsux!P!V!Y!r!v!}#S#Y#Z#]wfYdhjknsux!P!V!Y!r!v!}#S#Y#Z#]wbYdhjknsux!P!V!Y!r!v!}#S#Y#Z#]R!exQmZQ![oR!bvSPORT}j!PQRORURQ!^qR!t!^Q!PjR!j!PQ!w!cR#T!wTQOR",
  nodeNames: "âš  Comment Program FunctionDefinition Ident fn Parameters ( , ) Block { Statement ReturnStmt return Expression ExprWithBlock IfExpr if else ExprWithoutBlock Number Bool Bool Char VariableName BuiltinFunc BuiltinFunc PrefixExpr PrefixOp InfixExpr InfixOp AssignExpr AssignOp CallExpr ArgumentList CastExpr as Type Type BreakStmt break ContinueStmt continue LetStmt let mut ; LoopStmt loop WhileStmt while ForStmt for ExprStmt }",
  maxTerm: 65,
  skippedNodes: [0,1],
  repeatNodeCount: 4,
  tokenData: ")f~RlXY!yYZ!y]^!ypq!yqr#Ouv#]vw#jwx#uxy%gyz%lz{%q{|#]|}%|}!O&R!P!Q&]!Q!['P![!]'r!]!^'w!^!_'|!_!`(X!`!a(c!c!}(n#Q#R#]#R#S(n#T#o(n#o#p)P#p#q)U#q#r)a~#OO!`~~#TPm~!_!`#WQ#]OoQQ#bPoQ!_!`#eQ#jOqQQ#oQoQvw#W!_!`#e~#zVh~Ow#uwx$ax#O#u#O#P$f#P;'S#u;'S;=`%a<%lO#u~$fOh~~$iRO;'S#u;'S;=`$r;=`O#u~$wWh~Ow#uwx$ax#O#u#O#P$f#P;'S#u;'S;=`%a;=`<%l#u<%lO#u~%dP;=`<%l#u~%lOV~~%qOX~Q%vQoQz{#]!_!`#e~&ROW~~&YPm~oQ!_!`#e~&bQoQ!P!Q&h!_!`#e~&mSP~OY&hZ;'S&h;'S;=`&y<%lO&h~&|P;=`<%l&h~'URe~!O!P'_!Q!['P#Y#Z'm~'bP!Q!['e~'jPe~!Q!['e~'rOe~~'wO!b~~'|O!P~Q(RQoQ!^!_#]!_!`#WR(`P!cPqQ!_!`#WQ(hQoQ!_!`#W!`!a#]~(sSS~!Q![(n!c!}(n#R#S(n#T#o(n~)UOZ~Q)ZQoQ!_!`#e#p#q#W~)fO!X~",
  tokenizers: [0, 1],
  topRules: {"Program":[0,2]},
  specialized: [{term: 4, get: value => spec_Ident[value] || -1}],
  tokenPrec: 962
});

const rushLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ')', align: false }),
            }),
            language.foldNodeProp.add({
                Application: language.foldInside,
            }),
            highlight.styleTags({
                'for while loop if else return break continue': highlight.tags.controlKeyword,
                in: highlight.tags.operatorKeyword,
                'let fn': highlight.tags.definitionKeyword,
                as: highlight.tags.keyword,
                Bool: highlight.tags.bool,
                null: highlight.tags.null,
                Type: highlight.tags.typeName,
                'VariableName/Ident': highlight.tags.variableName,
                'CallExpr/VariableName/Ident': highlight.tags.function(highlight.tags.variableName),
                Property: highlight.tags.propertyName,
                'CallExpr/MemberExpr/Property': highlight.tags.function(highlight.tags.propertyName),
                'FnExpr/Ident': highlight.tags.function(highlight.tags.variableName),
                'Parameters/Ident': highlight.tags.local(highlight.tags.variableName),
                Comment: highlight.tags.lineComment,
                Number: highlight.tags.number,
                Char: highlight.tags.character,
                '+ - "*" "/" % "**"': highlight.tags.arithmeticOperator,
                '|| &&': highlight.tags.logicOperator,
                '< <= > >= "!=" ==': highlight.tags.compareOperator,
                '=': highlight.tags.definitionOperator,
                '( ) { } [ ]': highlight.tags.bracket,
                '. , ;': highlight.tags.separator,
                BuiltinFunc: highlight.tags.standard(highlight.tags.function(highlight.tags.variableName)),
                BuiltinVar: highlight.tags.standard(highlight.tags.variableName),
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: '//' },
    },
});
function rush() {
    return new language.LanguageSupport(rushLanguage);
}

exports.rush = rush;
exports.rushLanguage = rushLanguage;
